
<!DOCTYPE html>
<html>

<head>
    <title>NODEMCU-new</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />

    <!--
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css">
  <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
-->
    <!-- <link rel="stylesheet" href="/espman/jqm1.4.5.css"> -->
    <!--<script src="/espman/jq1.11.1.js"></script>-->
    <!--<script src="/espman/jqm1.4.5.js"></script>-->
    <!-- <script type="text/javascript" src="jqColorPicker.min.js"></script>-->




    <STYLE type="text/css" id="mystyleelement">
        .centerwrapper {
            margin: 0 auto;
            margin-left: auto;
            margin-right: auto;
            align: center;
            text-align: center
        }
        
        .ui-btn.my-tooltip-btn,
        .ui-btn.my-tooltip-btn:hover,
        .ui-btn.my-tooltip-btn:active {
            background: none;
            border: 0;
        }
        
        .center {
            text-align: center;
        }
        
        .footerContainer {
            width: 97%;
            height: 38px;
            border: none;
            position: relative;
        }
        
        .ui-btn.my-tooltip-btn,
        .ui-btn.my-tooltip-btn:hover,
        .ui-btn.my-tooltip-btn:active {
            background: none;
            border: 0;
        }
    </STYLE>

    <style>
        body {
            visibility: hidden
        }
    </style>


</head>

<body>
  
  

    <div data-role="header" data-theme="a" data-position="fixed">
        <h1 id='myheader'>WS2812-ESPWiFi</h1>
        <a href="#leftpanel" class="ui-btn ui-btn-left ui-alt-icon ui-nodisc-icon ui-corner-all ui-btn-icon-notext ui-icon-bars">Menu</a>
        <!--                <a href="#rightpanel"  class="ui-btn ui-btn-right ui-alt-icon ui-nodisc-icon ui-corner-all ui-btn-icon-notext ui-icon-gear">Menu</a>
 --></div>

    <div data-role="panel" id="leftpanel" data-position="left" data-display="overlay" data-theme="b">
        <!-- panel content goes here -->
        <div class="center">
            <h1 class="center">Menu</h1>
        </div>
        <div>
            <a href="#homepage" data-role="button" class="ui-btn">Home</a>
            <!--<a href="#savepage" data-role="button" class="ui-btn">Save</a>-->
            <a href="#presetspage" data-role="button" class="ui-btn">Presets</a>
            <a href="#palette" data-role="button" class="ui-btn" id="palettebutton">Palette</a>
            <a href="#timer" data-role="button" class="ui-btn">Timer</a>
            <a href="#layout" data-role="button" class="ui-btn">Layout</a>
            <a href="/espman/" rel="external" data-role="button" class="ui-btn">ESPmanager</a>
            <a href="#my-header" data-rel="close" class="ui-btn">Close</a>

        </div>

    </div>

    <div data-role="footer" data-theme="a">
        <h2 style="text-align:right">Heap: <var id="heap">-</var> Status: <var id="status"></var></h2>
    </div>


    <div data-role="page" id="homepage">

        <div data-role="content" id="content_homepage">
                <div class="ui-field-contain">
                    <label for="flip-enable">Enable:</label>
                    <select id="flip-enable" name="enable" data-role="flipswitch" class="">
                        <option>off</option>
                        <option>on</option>
                    </select>
                </div>
              


            <div class="ui-field-contain">
                <label for="modeslist">Mode:</label>
                <select name="mode" id="modeslist" class="effectslist">
                </select>
            </div>

            
              
            <div class="ui-field-contain presetlistclass">
                <label for="currentpresetslist">Preset:</label>
                <select name="preset" id="currentpresetslist" class="mysubmitdropdown"> 
                </select>
            </div>              

<div id="effectoptions">
              
              <!--classes  ("input_textbox"), ("input_textbox_IP"), ("input_slider"), ("input_textbox_rgb"),("input_selectmenu")-->

                <div class="ui-field-contain input_selectmenu_palette Palette">
                    <label for="input_Palette">Palette:</label>
                    <select name="palette" id="input_Palette" class='mysubmitthis '>
                        <option value="off" selected="selected">Off</option>
                        <option value="complementary">Complementary</option>
                        <option value="monochromatic">Monochromatic</option>
                        <option value="analogous">Analogous</option>
                        <option value="splitcomplements">Split Complements</option>
                        <option value="triadic">Triadic</option>
                        <option value="tetradic">Tetradic</option>
                        <option value="multi">multi</option>
                        <option value="wheel">Wheel</option>
                    </select>
                </div>

                <div class="ui-field-contain  input_textbox_rgb color1">
                    <label for="input_color1">Color One</label>
                    <input type="text" name="color1" id="input_color1" class="color no-alpha " data-control="hue" display="none" value="">
                </div>

                <div class="ui-field-contain  input_textbox_rgb color2">
                    <label for="input_color2">Color Two</label>
                    <input type="text" name="color2" id="input_color2" class="color no-alpha " display="none" data-control="hue" value="">
                </div>
                <div class="ui-field-contain input_slider brightness">
                    <label for="input_brightness">Brightness:</label>
                    <input class="mysubmitslider " type="range" name="brightness" id="input_brightness" min="0" max="255" step="1" value="0">
                </div>

                <div class="ui-field-contain input_slider speed">
                    <label for="input_speed">Speed:</label>
                    <input class="mysubmitslider  " type="range" name="speed" id="input_speed" min="0" max="255" step="1" value="0">
                </div>
                <div class="ui-field-contain input_slider randomness ">
                    <label for="input_randomness">Randomness:</label>
                    <input class="mysubmitslider  " type="range" name="randomness" id="input_randomness" min="0" max="8" step="1" value="0">
                </div>

                <div class="ui-field-contain input_textbox marqueetext">
                    <label for="input_marqueetext">Text:</label>
                    <input class='mysubmitthis ' type="text" name="marqueetext" id="input_marqueetext" value="">
                </div>
                
                
                <div class="ui-field-contain input_textbox udp_port">
                    <label for="input_udp_port">Port:</label>
                    <input type="text" name="udp_port" id="input_udp_port" value="" class='mysubmitthis'>
                </div>                
                
                
                <div class="ui-field-contain input_selectmenu udp_usemulticast">
                    <label for="input_udp_usemulticast">Use MultiCast:</label>
                    <select name="udp_usemulticast" id="input_udp_usemulticast" class="mysubmitthis ">
                        <option value=true selected="selected">Yes</option>
                        <option value=false>No</option>
                    </select>
                </div>
                
                
                <div class="ui-field-contain input_textbox_IP udp_multicast_ip_addr">
                    <label for="input_udp_multicast_ip_addr">Multicast Address:</label>
                    <input type="text" name="udp_multicast_ip_addr" id="input_udp_multicast_ip_addr" value="" class='mysubmitthis'>
                </div>  
                
 <!--DMX-->

                <div class="ui-field-contain input_textbox dmx_bin">
                    <label for="input_dmx_bin">Bin Pixels:</label>
                    <input type="text" name="dmx_bin" id="input_dmx_bin" value="" class="mysubmitthis ">
                </div> 
                
                <div class="ui-field-contain input_textbox dmx_universe">
                    <label for="input_dmx_universe">Universe:</label>
                    <input type="text" name="dmx_universe" id="input_dmx_universe" value="" class="mysubmitthis ">
                </div> 
 
                 <div class="ui-field-contain input_textbox dmx_ppu">
                    <label for="input_dmx_ppu">PPU:</label>
                    <input type="text" name="dmx_ppu" id="input_dmx_ppu" value="" class="mysubmitthis ">
                </div>

                 <div class="ui-field-contain input_textbox dmx_channel_start">
                    <label for="input_dmx_channel_start">Channel Start:</label>
                    <input type="text" name="dmx_channel_start" id="input_dmx_channel_start" value="" class="mysubmitthis ">
                </div>
                
                 <div class="ui-field-contain input_textbox dmx_port">
                    <label for="input_dmx_port">UDP Port:</label>
                    <input type="text" name="dmx_port" id="input_dmx_port" value="" class="mysubmitthis ">
                </div>
                
                <div class="ui-field-contain input_selectmenu dmx_usemulticast">
                    <label for="input_dmx_usemulticast">MultiCast:</label>
                    <select name="dmx_usemulticast" id="input_dmx_usemulticast" class="mysubmitthis ">
                        <option value=true selected="selected">Yes</option>
                        <option value=false>No</option>
                    </select>
                </div>                
            
                 <div class="ui-field-contain input_textbox_IP dmx_multicast_ip_addr">
                    <label for="input_dmx_multicast_ip_addr">MultiCast IP:</label>
                    <input class='mysubmitthis ' type="text" name="dmx_multicast_ip_addr" id="input_dmx_multicast_ip_addr" value="" disabled>
                </div>
                
                
                <div class="ui-field-contain input_selectmenu rotation">
                    <label for="input-rotation">Rotation:</label>
                    <select name="rotation" id="input-rotation" class="mysubmitthis ">
                        <option value="0" selected="selected">0</option>
                        <option value="1">90</option>
                        <option value="2">180</option>
                        <option value="3">270</option>
                    </select>
                </div>

                <div class="ui-field-contain input_selectmenu serialspeed">
                    <label for="adalight-serialspeed">Serial Speed:</label>
                    <select name="serialspeed" id="adalight-serialspeed" class="mysubmitthis ">
                        <option value="115200" selected="selected">115200</option>
                        <option value="234000">234000</option>
                        <option value="460800">460800</option>
                        <option value="1000000">1,000,000</option>
                        <option value="2000000">2,000,000</option>
                    </select>
                </div>
<!--RainbowCycle-->

                <div class="ui-field-contain input_selectmenu wholerainbow">
                    <label for="input_wholerainbow">Use Whole Rainbow:</label>
                    <select name="wholerainbow" id="input_wholerainbow" class="mysubmitthis ">
                        <option value=true>Yes</option>
                        <option value=false selected="selected">No</option>
                    </select>
                </div> 
                
                
            </div>
            <!-- effectoptions -->

        </div>
        <!-- content -->
    </div>
    <!-- homepage -->

    <div data-role="page" data-close-btn="right" data-dialog="true" id="presetspage">
      
        <div data-role="header">
        <h1>Presets</h1>
        </div>
        <div data-role="content">
          <div id='presetpage_currentEffect'></div>
            <form id="presets_form">
                    <div class="ui-field-contain ">
                        <label for="select-saveasnew">Action:</label>
                        <select name="presetcommand" id="select-saveasnew">
                            <option value="load" selected="selected">Load</option>
                            <option value="new">Create New</option>
                            <option value="overwrite">Overwrite Existing</option>
                            <option value="delete">Delete Existing</option>
                            <option value="deleteall">Delete ALL</option>
                        </select>
                    </div>
                    <!--style="display: none;"-->
                <div class="ui-field-contain" id="savepage_effects_list_div" >   
                    <label for="savepage_effects_list_select">Effect:</label>
                    <select name="selectedeffect" id="savepage_effects_list_select" >

                    </select>
                </div>
                
                <div class="ui-field-contain" style="display: none;">
                    <label for="input_savename">Effect Name:</label>
                    <input type="text" name="presetsavename" id="input_savename" value="" class="noEnterSubmit">
                </div>

                <a href="#homepage" data-role="button" data-theme="a" data-icon="save" data-iconpos="notext" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">OK</a>

                </form>
        </div>

    </div>
    
    
    
    <!--<div data-role="page" id="presets">-->

    <!--    <div data-role="content">-->

    <!--        <h3>Presets</h3>-->


    <!--    </div>-->

    <!--</div>-->


    <div data-role="page" id="layout" data-close-btn="right" data-dialog="true">

<div data-role="header">
  <h1> Layout </h1>
  </div>
        <div data-role="content">

            
            <p> See <a href="https://learn.adafruit.com/adafruit-neopixel-uberguide/neomatrix-library" target="_blank">here</a> for Matrix layout options. Thanks to Adafruit</p>
            <p id="firstpixelidentify"> Click this to identify first pixel,</p>
            <p id="revealorder">Click this to show order</p>
            <form id="layoutform">
                <div class="ui-field-contain">
                    <label for="nopixels">Number of Pixels:</label>
                    <input type="text" name="nopixels" id="nopixels" value="" class="noEnterSubmit">
                </div>
                <div class="ui-field-contain">
                    <label for="gridx">X dimentions:</label>
                    <input type="text" name="grid_x" id="gridx" value="" class="noEnterSubmit">
                </div>
                <div class="ui-field-contain">
                    <label for="gridy">Y dimentions:</label>
                    <input type="text" name="grid_y" id="gridy" value="" class="noEnterSubmit">
                </div>
                <div class="ui-field-contain">
                    <label for="select-matrix-type">Matrix Config:</label>
                    <select name="matrixmode" id="select-matrix-type">
                        <option value="singlematrix" selected="selected">Single Matrix</option>
                        <option value="multiplematrix">Multiple Matrix</option>
                    </select>
                </div>
                <!-- Single matrix-->
                <div id="singlematrix-config">
                    <div class="ui-field-contain ">
                        <label for="select-singlematrix">First Pixel:</label>
                        <select name="firstpixel" id="select-singlematrix">
                            <option value="topleft" selected="selected">Top Left</option>
                            <option value="topright">Top Right</option>
                            <option value="bottomleft">Bottom Left</option>
                            <option value="bottomright">Bottom Right</option>
                        </select>
                    </div>
                    <div class="ui-field-contain ">
                        <label for="select-singlematrix-axis">Axis:</label>
                        <select name="axis" id="select-singlematrix-axis">
                            <option value="rowmajor" selected="selected">Row Major</option>
                            <option value="columnmajor">Column Major</option>
                        </select>
                    </div>
                    <div class="ui-field-contain ">
                        <label for="select-singlematrix-seq">Sequence:</label>
                        <select name="sequence" id="select-singlematrix-seq">
                            <option value="progressive" selected="selected">Progressive</option>
                            <option value="zigzag">Zig Zag</option>
                        </select>
                    </div>
                </div>
                <!-- singlematrix config-->
                <!-- Multiple matrix-->
                <div id="multimatrix-config">
                    <div class="ui-field-contain ">
                        <label for="select-multimatrix">First Tile:</label>
                        <select name="multimatrixtile" id="select-multimatrix">
                            <option value="topleft" selected="selected">Top Left</option>
                            <option value="topright">Top Right</option>
                            <option value="bottomleft">Bottom Left</option>
                            <option value="bottomright">Bottom Right</option>
                        </select>
                    </div>
                    <div class="ui-field-contain ">
                        <label for="select-multimatrix-axis">Tile Axis:</label>
                        <select name="multimatrixaxis" id="select-multimatrix-axis">
                            <option value="rowmajor" selected="selected">In Rows</option>
                            <option value="columnmajor">In Columns</option>
                        </select>
                    </div>
                    <div class="ui-field-contain ">
                        <label for="select-multimatrix-seq">Tile Sequence:</label>
                        <select name="multimatrixseq" id="select-multimatrix-seq">
                            <option value="progressive" selected="selected">Progressive</option>
                            <option value="zigzag">Zig Zag</option>
                        </select>
                    </div>
                </div>

                <!-- multimatrix config-->
                <!--<button id="apply_layout_settings" type="button" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">Apply</button>-->
                <a href="#homepage"  data-role="button" data-theme="a" data-icon="save" data-iconpos="notext" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">OK</a>

            </form>
        </div>

    </div>


    <div data-role="page" id="palette" data-close-btn="right" data-dialog="true">
        <div data-role="header">
        <h1>Palette</h1>
        </div>
        <div data-role="content">

            <!--<h3> Palette </h3>-->
            <form id="palette-form">
                <div class="ui-field-contain">
                    <label for="select-palettes2">Palette:</label>
                    <select name="palette" id="select-palettes2">
                        <option value="off" selected="selected">Off</option>
                        <option value="complementary">Complementary</option>
                        <option value="monochromatic">Monochromatic</option>
                        <option value="analogous">Analogous</option>
                        <option value="splitcomplements">Split Complements</option>
                        <option value="triadic">Triadic</option>
                        <option value="tetradic">Tetradic</option>
                        <option value="multi">multi</option>
                        <option value="wheel">Wheel</option>
                    </select>
                </div>
                <!--enum random_mode { NOT_RANDOM = 0 , TOTAL_RANDOM, TIME_BASED_RANDOM, RANDOM_AFTER_LOOP};-->

                <div class="ui-field-contain">
                    <label for="select-palettes-randomness">Randomness:</label>
                    <select name="palette-random" id="select-palettes-randomness">
                        <option value="off" selected="selected">Off</option>
                        <option value="totalrandom">Total Random</option>
                        <option value="timebased">Time Based</option>
                        <option value="randomafterloop">Random After Loop</option>
                    </select>
                </div>
                
                <div class="ui-field-contain">
                    <label for="input-palette-spread">Spread:</label>
                    <input type="text" name="palette-spread" id="input-palette-spread" value="" class="noEnterSubmit">
                </div>
                <div class="ui-field-contain">
                    <label for="input-palette-delay">Time Delay:</label>
                    <input type="text" name="palette-delay" id="input-palette-delay" value="" class="noEnterSubmit">
                </div>
                <a href="#homepage"  data-role="button" data-theme="a" data-icon="save" data-iconpos="notext" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">OK</a>

                <!--<button id="apply_palette_settings" type="button" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">Apply</button>-->
            </form>
            
        </div>

    </div>


    <div data-role="page" id="timer" data-close-btn="right" data-dialog="true">
        <div data-role="header">
        <h1>Timer</h1>
        </div>
        
        <div data-role="content">

            <div id="timer-time-left"></div>
            <form id="timer-form">

                <!--enum random_mode { NOT_RANDOM = 0 , TOTAL_RANDOM, TIME_BASED_RANDOM, RANDOM_AFTER_LOOP};-->

                <div class="ui-field-contain">
                    <label for="flip-enable-timer">Enable:</label>
                    <select id="flip-enable-timer" name="enabletimer" data-role="flipswitch">
                        <option>off</option>
                        <option>on</option>
                    </select>
                </div>
                <div id="maintimerdiv">
                    <div class="ui-field-contain">
                        <label for="input-timer-delay">Delay (min):</label>
                        <input type="text" name="timer" id="input-timer-delay" value="" class="noEnterSubmit">
                    </div>

                    <div class="ui-field-contain">
                        <label for="select-timer-command">Action:</label>
                        <select name="timercommand" id="select-timer-command">
                            <option value="off" selected="selected">Off</option>
                            <!--<option value="start">Start</option>-->
                            <option value="loadpreset">Start</option>
                            <option value="brightness">Set Brightness</option>
                            <!--<option value="speed">Set Speed</option>-->
                        </select>
                    </div>
                    <div id="timeroptionsdiv">
                        <div class="ui-field-contain start">
                            <label for="select-timer-option">Effect:</label>
                            <select name="timeroption" id="select-timer-option" class="effectslist">
                            </select>
                        </div>
                        <div class="ui-field-contain brightness speed">
                            <label for="slider-timer-option">Value:</label>
                            <input type="range" name="timeroption" id="slider-timer-option" min="0" max="255" step="1" value="0">
                        </div>
                        <div class="ui-field-contain loadpreset">
                            <label for="select-timer-preset">Preset:</label>
                            <select name="timeroption" id="select-timer-preset" class="presetlist">
                            </select>
                        </div>                        
                        
                    </div>
                <a href="#homepage"  data-role="button" data-theme="a" data-icon="save" data-iconpos="notext" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">OK</a>

                    <!--<button id="apply_layout_settings" type="button" class="mysubmit ui-btn ui-corner-all ui-shadow ui-btn-b ui-btn-icon-left ui-icon-check">Apply</button>-->
                </div>
                <!-- end of maintimerdiv-->
            </form>
        </div>

    </div>

     <script>
     
        function loadcss(url, callback) {
            var link = document.createElement("link");
            link.setAttribute("rel", "stylesheet");
            link.setAttribute("href", url);
            link.addEventListener('load', function() {
                var script = document.createElement("script");
                script.textContent = "(" + callback.toString() + ")();";
                document.body.appendChild(script);
            }, false);
            document.body.appendChild(link);
        }

        function loadjs(url, callback) {
            var script = document.createElement("script");
            script.setAttribute("src", url);
            script.addEventListener('load', function() {
                var script = document.createElement("script");
                script.textContent = "(" + callback.toString() + ")();";
                document.body.appendChild(script);
            }, false);
            document.body.appendChild(script);
        }

        loadcss("/espman/jqm1.4.5.css", function() {
            loadjs("/espman/jq1.11.1.js", function() {
                //window.jQ=jQuery.noConflict(true);
                loadjs("/espman/jqm1.4.5.js", function() {
                    //window.jQ=jQuery.noConflict(true);
                    loadjs("jqColorPicker.min.js", function() {
                        $(function() {

                            $("[data-role='header']").toolbar();
                            $("[data-role='footer']").toolbar();
                            $("body>[data-role='panel']").panel();

                        });
                        RUNDOCUMENT();
                  //      GetData("homepage");
                        $("body").css("visibility", "visible");
                    });
                });
            });
        });
     </script>


    <script>
        var currentmode;
        var globaldata = {};
        var settings = {}; 
        var presetspagedata = {}; 

        var plot1;
        var graphvalues = [''];
        var disable_update = false;
        var isconnected = false;
        var graphdata;
        var xaxisvar = 60;
        var booldynamic;
        var graphtimeframe = 60;


        var NEO_MATRIX_TOP = 0x00 // Pixel 0 is at top of matrix
        var NEO_MATRIX_BOTTOM = 0x01 // Pixel 0 is at bottom of matrix
        var NEO_MATRIX_LEFT = 0x00 // Pixel 0 is at left of matrix
        var NEO_MATRIX_RIGHT = 0x02 // Pixel 0 is at right of matrix

        var NEO_MATRIX_CORNER = 0x03 // Bitmask for pixel 0 matrix corner
        var NEO_MATRIX_ROWS = 0x00 // Matrix is row major (horizontal)
        var NEO_MATRIX_COLUMNS = 0x04 // Matrix is column major (vertical)
        var NEO_MATRIX_AXIS = 0x04 // Bitmask for row/column layout
        var NEO_MATRIX_PROGRESSIVE = 0x00 // Same pixel order across each line
        var NEO_MATRIX_ZIGZAG = 0x08 // Pixel order reverses between lines
        var NEO_MATRIX_SEQUENCE = 0x08 // Bitmask for pixel line order

        // These apply only to tiled displays (multiple matrices):

        var NEO_TILE_TOP = 0x00 // First tile is at top of matrix
        var NEO_TILE_BOTTOM = 0x10 // First tile is at bottom of matrix
        var NEO_TILE_LEFT = 0x00 // First tile is at left of matrix
        var NEO_TILE_RIGHT = 0x20 // First tile is at right of matrix
        var NEO_TILE_CORNER = 0x30 // Bitmask for first tile corner
        var NEO_TILE_ROWS = 0x00 // Tiles ordered in rows
        var NEO_TILE_COLUMNS = 0x40 // Tiles ordered in columns
        var NEO_TILE_AXIS = 0x40 // Bitmask for tile H/V orientation
        var NEO_TILE_PROGRESSIVE = 0x00 // Same tile order across each line
        var NEO_TILE_ZIGZAG = 0x80 // Tile order reverses between lines
        var NEO_TILE_SEQUENCE = 0x80 // Bitmask for tile line order

        function RUNDOCUMENT() {

      $(document).on( "pagechange", function( event ) { GetData($.mobile.activePage.attr('id'));  } ); 


  //    $('.noEnterSubmit').bind('keypress', false);
      
      $('.noEnterSubmit').keypress(function(e){
    //if ( e.which == 13 ) return false;
    //or...
    if ( e.which == 13 ) e.preventDefault();
    });


      //      $(document).on("pageshow", "#layout", function() {




   //         });


            //$(document).on('pageinit', '#autotune', function(){     

            //      GetData(); 


            $(document).on("pagecreate", "#layout", function() {

                $('#select-matrix-type').change(function() {
                    sortmatrix($(this));
                });

                $('#firstpixelidentify').click(function() {
                    var data = $.param({
                        flashfirst: "yes"
                    });
                    $.post("data.esp", data, function() {});
                });

                $('#revealorder').click(function() {
                    var data = $.param({
                        revealorder: "yes"
                    });
                    $.post("data.esp", data, function() {});
                })


            });




            // $(document).on("pagebeforeshow", "#layout", function() {

            // //   GetData();
            //     console.log("layoutpage data:" + globaldata)

            //     if (globaldata) {

            //         if (globaldata.hasOwnProperty('pixels')) {
            //             $("#nopixels").val(globaldata.pixels);
            //         }
            //         if (globaldata.hasOwnProperty('grid_x')) {
            //             $("#gridx").val(globaldata.grid_x);
            //         }
            //         if (globaldata.hasOwnProperty('grid_y')) {
            //             $("#gridy").val(globaldata.grid_y);
            //         }
            //         if (globaldata.hasOwnProperty('matrixmode')) {
            //             $("#select-matrix-type").val(globaldata.matrixmode).selectmenu("refresh");
            //         }

            //         if (globaldata.hasOwnProperty('firstpixel')) {
            //             $("#select-singlematrix").val(globaldata.firstpixel).selectmenu("refresh");
            //         }
            //         if (globaldata.hasOwnProperty('axis')) {
            //             $("#select-singlematrix-axis").val(globaldata.axis).selectmenu("refresh");
            //         }
            //         if (globaldata.hasOwnProperty('sequence')) {
            //             $("#select-singlematrix-seq").val(globaldata.sequence).selectmenu("refresh");
            //         }

            //         if (globaldata.hasOwnProperty('multimatrixtile')) {
            //             $("#select-multimatrix").val(globaldata.multimatrixtile).selectmenu("refresh");
            //         }
            //         if (globaldata.hasOwnProperty('multimatrixaxis')) {
            //             $("#select-multimatrix-axis").val(globaldata.multimatrixaxis).selectmenu("refresh");
            //         }
            //         if (globaldata.hasOwnProperty('multimatrixseq')) {
            //             $("#select-multimatrix-seq").val(globaldata.multimatrixseq).selectmenu("refresh");
            //         }
            //     }

            //     sortmatrix('#select-matrix-type');

            // }); 


            $(document).on("pagecreate", "#homepage", function() {

              //  GetData("all");

                $('#modeslist').change(function() {

                    //console.log("mode change");
                    //var mode = $(this).val();

                    // $('#effectoptions').children('div').each(function(index) {
                    //     $(this).hide();
                    // });

                    // $('#effectoptions').children('div').each(function(index) {
                    //     //if ($(this).hasClass(mode)) $(this).show();
                    //     $.each(settings, function(index, element) {
                    //       if ($(this).hasClass(element)) $(this).show();
                    //     });
                        
                    // });
                    
                    
                    // if (settings.hasOwnProperty('brightness')) {
                    //   console.log("brightness present in global settings"); 
                    //   $('#brightness').parent().show(); 
                    //   console.log("Parent ID = " + $('#brightness').parent().)
                      
                    // }

                    $("#status").empty().append("Waiting ").css("color", "blue");;
                    
                    $.post("data.esp", $(this).serialize(), function() {
                        //GetData();
                    }).success(function(e) {
                      
                        processJSON(e);
                        
                        //console.log("Settings var = ");
                        //console.log(settings);
                    
                        // $('#effectoptions').children('div').each(function(index) {
                        // //if ($(this).hasClass(mode)) $(this).show();
                        // current = $(this); 
                        // $.each(settings, function(key, value) {
                        //   //console.log("[" + key + "] " + value); 
                        //   if (current.hasClass(key)) current.show();
                        // });
                        
                        // });
                                          
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});

                });

            });


            //  
            $(document).on('touchstart click', '#myheader', function(e) {
                e.preventDefault();
                GetData($.mobile.activePage.attr('id'));
                //console.log("#myheader click"); 
            });

            // $(document).on("mobileinit", function() {
            //     GetData("all");
            // });
            

          
            $(document).on('click', '.mysubmit', function() {
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).closest("form").find('input,select').filter(':visible').serialize(), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                      processJSON(e);
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
            });

            $(document).on('change', '.mysubmitthis', function(e) {
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).serialize(), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                        processJSON(e); 
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {
                      //GetData(); 
                    });
            });

            $(document).on('change', '.mysubmittext', function(e) {
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).find('input'), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                        $("#status").empty().append("Success").css("color", "green");;
                        processJSON(e); 
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
            });

            $(document).on('change', '.mysubmitdropdown', function(e) {
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).serialize(), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                        processJSON(e); 
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
            });

            $(document).on('slidestop', '.mysubmitslider', function(e) {
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).serialize(), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                        processJSON(e); 
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
            });
            
            // better way to get data for new page...         
            // $(document).on("pagebeforechange", function(e, data) {
            //     var toPage = data.toPage[0].id;
            //     GetData(toPage);
            // });

            $("#timer").on("pagebeforeshow", function() {


                // hide all options first 
                $('#timeroptionsdiv').children('div').each(function(index) {
                    $(this).closest("div").addClass("ui-state-disabled");
                    $(this).hide();
                });


                if (globaldata.hasOwnProperty('modes')) {
                    temp = globaldata.modes;
                    $("#select-timer-option").find('option').remove();
                    $.each(temp, function(key, value) {
                        $("#select-timer-option").append('<option value=' + value + '>' + value + '</option>');
                    });

                    $('#select-timer-option').selectmenu('refresh');
                }

              //  GetData();


                $("#flip-enable-timer").change(function() {
                    $("#timer-time-left").empty();
                    console.log("Changeed to " + $(this).val());
                    if ($(this).val() == "on") {
                        $('#maintimerdiv').children('div').each(function(index) {
                            $(this).show();
                        });
                    } else {
                        $('#maintimerdiv').children('div').each(function(index) {
                            $(this).hide();
                        });
                    }
                });


                $('#select-timer-command').change(function() {

                    var option = $(this).val();

                    $('#timeroptionsdiv').children('div').each(function(index) {
                        $(this).closest("div").addClass("ui-state-disabled");
                        $(this).hide();
                    });

                    $('#timeroptionsdiv').children('div').each(function(index) {
                        if ($(this).hasClass(option)) {
                            $(this).show();
                            $(this).closest("div").removeClass("ui-state-disabled");

                        }
                    });

                });

            });
            
            $("#presetspage").on("pagebeforeshow", function() {
              
              // #savepage_effects_list_select
              // #select-saveasnew
              // #input_savename
              

              //               <option value="new" selected="selected">New</option>
              //               <option value="overwrite">Overwrite Existing</option>
              //               <option value="delete">Delete Existing</option>

                $('#select-saveasnew').change(function() {
                    var command = $(this).val();
              

                if (command == "new") {
                  $('#input_savename').closest('div.ui-field-contain').show();
                  $('#savepage_effects_list_select').closest('div.ui-field-contain').hide();
                  
                }
                
                if (command == "overwrite") {
                  $('#input_savename').closest('div.ui-field-contain').show();
                  $('#savepage_effects_list_select').closest('div.ui-field-contain').show();
                }

                if (command == "delete" || command == "load") {
                  $('#input_savename').closest('div.ui-field-contain').hide();
                  $('#savepage_effects_list_select').closest('div.ui-field-contain').show();
                }

                    if (command == "deleteall") {
                  $('#input_savename').closest('div.ui-field-contain').hide();
                  $('#savepage_effects_list_select').closest('div.ui-field-contain').hide();
                }            
          
                });
                
                $('#savepage_effects_list_select').change(function() {
                  
                  selected = $(this).val();
                  
                  if (presetspagedata.hasOwnProperty('Presets')) {
                    
                    $.each(presetspagedata.Presets, function(key, value) {
                    
                    if (selected == key) {
                      $('#input_savename').val(value.name); 
                    }
                    
                    }); 
                  }
                  
                   //$('#input_savename').val($(this).val());
                });
                
                      //               presetspagedata = result; 
                      // $("#savepage_effects_list_select").find('option').remove();
                      // if (result.hasOwnProperty('Presets')) {
                      //       $.each(result.Presets, function(key, value) {
                      //           var isconnected = " ";
                      //           if (result.hasOwnProperty('settings')) {
                      //           if (result.settings.currentpreset == value.name) isconnected = "selected=\"selected\"";
                      //           }
                      //             console.log("KEY = " + key + ", VALUE = " + value); 
                      //           $("#savepage_effects_list_select").append('<option value=' + key + " " + isconnected + '>' + value.name +"  (" + value.effect + ")" + '</option>');
                      //       }); 
                      //   $('#savepage_effects_list_select').selectmenu('refresh');                      
                      
                      // } 
                
                
            });
            

            $("#homepage").on("pagebeforeshow", function() {
              
                $("#flip-enable").on("change", flipChanged );

                var mode = $('#modeslist').val();

                $('#effectoptions').children('div').each(function(index) {
                    $(this).hide();
                });

                $('#effectoptions').children('div').each(function(index) {
                    if ($(this).hasClass(mode)) $(this).show();
                });
                
                
              //   $('#input_udp_usemulticast').change( function() {
                  
              // if ( $(this).val() == "true" ) {
              //     $('#udp_multicast_ip_addr').closest('.ui-field-contain').show(); 
              //     } else {
              //     $('#udp_multicast_ip_addr').closest('.ui-field-contain').hide(); 
              //     } 

              //   });
                
              //   $('#input_dmx_usemulticast').change( function() {

              // if ( $(this).val() == "true" ) {
              //     $('#dmx_multicast_ip_addr').closest('.ui-field-contain').show(); 
              //     } else {
              //     $('#dmx_multicast_ip_addr').closest('.ui-field-contain').hide(); 
              //     }                  
              //   });
                
                $('.color').colorPicker({
                    preventFocus: true,
                    renderCallback: function($elm, toggled) {
                        if (toggled === true) { // simple, lightweight check
                            // ... like an open callback
                        } else if (toggled === false) {

                            // ... like a close callback
                            //var nameof = $(this).attr("name"); 
                            //var $form = $(this).closest('input');

                            //console.log($form.attr('name'));
                            var colors = this.color.colors,
                                rgb = colors.RND.rgb;
                            //console.log(rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + colors.alpha);

                            var $form = $elm.closest('form');
                            var inputName = $elm.attr('name');
                            //var inputValue = $elm.attr('value');

                            // var data = {
                            //     color: {
                            //         name: inputName,
                            //         R: rgb.r,
                            //         G: rgb.g,
                            //         B: rgb.b,
                            //     }
                            // };
                            // console.log(JSON.stringify(data));
                            
                            $("#status").empty().append("Waiting ").css("color", "blue");;
                            
                            $.post("data.esp", inputName + "=" + rgb.r + "," + rgb.g + "," + rgb.b 
                                // function(data) {
                                //     console.log(data);
                                // }
                            ).success(function(e) {
                              if (e) {
                                processJSON(e); 
                              }
                            $("#status").empty().append("Success").css("color", "green");;
                        })
                        .error(function() {
                            $("#status").empty().append("Error").css("color", "red");;
                        })
                        .complete(function() {});
                        
                            $elm.css('color', "rgb(" + colors.RND.rgb.r + "," + colors.RND.rgb.g + "," + colors.RND.rgb.b + ")");
                            $elm.css('text-shadow', 'none');
                        }
                    },
                    buildCallback: function($elm) {
                        var colorInstance = this.color,
                            colorPicker = this,
                            random = function(n) {
                                return Math.round(Math.random() * (n || 255));
                            };
                        $elm.append('<div class="cp-memory">' +
                            '<div></div><div></div><div></div><div></div>' +
                            '<div></div><div></div><div></div><div class="cp-store">S</div>').
                        on('click', '.cp-memory div', function(e) {
                          console.log("Colour picker click"); 
                            var $this = $(this);

                            if (this.className) {
                                $this.parent().prepend($this.prev()).children().eq(0).
                                css('background-color', '#' + colorInstance.colors.HEX);
                            } else {
                                colorInstance.setColor($this.css('background-color'));
                                colorPicker.render();
                            }
                        }).find('.cp-memory div').each(function() {
                            !this.className && $(this).css({
                                background: 'rgb(' + random() + ', ' + random() + ', ' + random() + ')'
                            });
                        });
                    },
                    opacity: false,
                    cssAddon: // could also be in a css file instead
                        '.cp-memory {margin-bottom:6px; clear:both;}' +
                        '.cp-xy-slider:active {cursor:none;}' +
                        '.cp-memory div {float:left; width:17px; height:17px; margin-right:2px;' +
                        'background:rgba(0,0,0,1); text-align:center; line-height:17px;}' +
                        '.cp-memory .cp-store {width:21px; margin:0; background:none; font-weight:bold;' +
                        'box-sizing:border-box; border: 1px solid; border-color: #666 #222 #222 #666;}' +
                        '.cp-color-picker{z-index:16777271}'
                });

                // $("#brightness").on('slidestop', function() {
                //     $("#status").empty().append("Waiting...").css("color", "blue");;
                //     $.post("data.esp", $(this).serialize())
                //         .success(function(e) {
                //             processJSON(e); 
                //             $("#status").empty().append("Success").css("color", "green");;
                //         })
                //         .error(function() {
                //             $("#status").empty().append("Error").css("color", "red");;
                //         })
                //         .complete(function() {});
                // });

                // $("#speed").on('slidestop', function() {
                //     $("#status").empty().append("Waiting...").css("color", "blue");;
                //     $.post("data.esp", $(this).serialize())
                //         .success(function(e) {
                //             processJSON(e); 
                //             $("#status").empty().append("Success").css("color", "green");;
                //         })
                //         .error(function() {
                //             $("#status").empty().append("Error").css("color", "red");;
                //         })
                //         .complete(function() {});
                // });
            });

            function SendColor() {
                $.post("data.esp", $(this).serialize()).success(function(e) {
                        processJSON(e)
                        $("#status").empty().append("Success").css("color", "green");;
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
            }

            function GetDynamicData() {

            }




            // function GetDataOnly() {
            //   $.getJSON("melvide.esp?plain=data", function(result) {

            //         }).success(function() { $("#status").empty().append("Connected").css("color", "green");;  })
            //     .error(function() {   $("#status").empty().append("Not Connected").css("color", "red");;  })
            //     .complete(function() {  });
            // }
            //$('#homepage').live('pageshow', function() {
            //});
            function toHHMMSS(seconds) {
                var h, m, s, result = '';
                // HOURs
                h = Math.floor(seconds / 3600);
                seconds -= h * 3600;
                if (h) {
                    result = h + "h ";
                }
                // MINUTEs
                m = Math.floor(seconds / 60);
                seconds -= m * 60;
                if (m) {
                    result += m < 10 ? '0' + m + ' min' : m + ' min';
                }
                // SECONDs
                //  s=seconds%60;
                //  result += s<10 ? '0'+s : s;
                // var min = h * 60 + m;

                //return min;
                return "Last " + result;

            }

        } // end of rundocumentt
        
    function flipChanged(e) {
      
                $("#status").empty().append("Waiting ").css("color", "blue");;
                $.post("data.esp", $(this).serialize(), function(data) {
                        //console.log("Data Sent");
                    }).success(function(e) {
                        $("#status").empty().append("Success").css("color", "green");;
                        //GetData(); 
                        processJSON(e);
                    })
                    .error(function() {
                        $("#status").empty().append("Error").css("color", "red");;
                    })
                    .complete(function() {});
    }
    
    function processJSON(result) {
      
      if (!result) { return; } 
      
      // console.log("              DUMP         ");
      // console.log(result);
      // console.log("              DUMP END"); 
                      // trying to get the json for settings in before
                      if (result.hasOwnProperty('settings')) {
                          settings = result.settings; 
                          //console.log("Settings Allocated");
                      }
      
                  if (!pagevar) { pagevar = $.mobile.activePage.attr('id'); } 
                
                    //console.log("RESULT:")
                    //console.log(result);
                   // if (pagevar === "all") {
                  //      globaldata = result;
                        //console.log("GLOBALDATA:");
                        //console.log(globaldata);
                  //  }

                    if ($.mobile.activePage.attr('id') == 'timer') {

                        $("#timer-time-left").empty();

                        if (result.hasOwnProperty("timer")) {
                            values = result.timer;
                            if (values.hasOwnProperty('running')) {

                                $("#flip-enable-timer").val((values.running) ? "on" : "off").flipswitch('refresh').trigger("change");
                            }

                            // add time remaining in here
                            if (values.hasOwnProperty('remaining')) {
                              $("#timer-time-left").empty().append(" " + values.remaining[0] + "min " + values.remaining[1] + "sec remaining");
                              
                            }
                        }
                        
                      $("#select-timer-preset").find('option').remove();
                      if (result.hasOwnProperty('Presets')) {
                        
                            $.each(result.Presets, function(key, value) {
                                var isconnected = " ";
                                if (result.hasOwnProperty('settings')) {
                                if (result.settings.currentpreset == value.ID) isconnected = "selected=\"selected\"";
                                }
                                  //console.log("KEY = " + key + ", VALUE = " + value); 
                                $("#select-timer-preset").append('<option value=' + value.ID + " " + isconnected + '>' + value.name +"  (" + value.effect + ")" + '</option>');
                            }); 
                        $('#select-timer-preset').selectmenu('refresh');   
                      }
                    }

                    // Homepage        

                    if ($.mobile.activePage.attr('id') == 'homepage') {

                        if (result.hasOwnProperty('modes') && result.hasOwnProperty('settings')) {
                            temp = result.modes;
                            $("#modeslist").find('option').remove();
                            //console.log("currentmode = " + result.currentmode);
                            $.each(temp, function(key, value) {
                                var isconnected = " ";
                                if (result.hasOwnProperty('settings')) {
                                if (result.settings.effect == value) isconnected = "selected=\"selected\"";
                                }
                                  
                                $("#modeslist").append('<option value=' + value + " " + isconnected + '>' + value + '</option>');
                            });

                            $('#modeslist').selectmenu('refresh');
                            
                            if (result.settings.effect != "Off") { 
                              $("#flip-enable").off("change").val("on").flipswitch('refresh').on("change",flipChanged); //.trigger("change"); 
                              
                            } else {
                              $("#flip-enable").off("change").val("off").flipswitch('refresh').on("change",flipChanged); //.trigger("change");
                            }
                            
                        }
                        
                        // add time remaining in here
                        if (result.hasOwnProperty("timer") && result.timer.hasOwnProperty('remaining')) {
                              $('#div_inserted_timer').remove();
                              $("#content_homepage").prepend("<div id='div_inserted_timer' style='text-align: center'>  Timer " + result.timer.remaining[0] + "min " + result.timer.remaining[1] + "sec remaining </div>");
                            } else {
                              $('#div_inserted_timer').remove(); 
                            }
                            
                        
                        if (result.hasOwnProperty('settings')) {
                          
                          if (result.settings.hasOwnProperty("Palette")) {
                            $("#palettebutton").show();
                          } else {
                            $("#palettebutton").hide();
                          }
                          
                        $('#effectoptions').children('div').each(function(index) {
                          $(this).hide();
                        });
                    

                        $('#effectoptions').children('div').each(function(index) {
                        //if ($(this).hasClass(mode)) $(this).show();
                        currentdiv = $(this); 
                        $.each(result.settings, function(key, value) {
                          //console.log("[" + key + "] " + value); 
                          if (currentdiv.hasClass(key)) { 
                            currentdiv.show();
                            //console.log("SHOW: " + key); 
                          }; 
                        });
                        
                        });
                        
                        $.each(settings, function(key, value) {

                          $( '#effectoptions > .input_textbox').find("#input_" + key).closest('input').val(value); 
                          $( '#effectoptions > .input_textbox_IP').find("#input_" + key).closest('input').val(value[0] + "." + value[1] + "." + value[2] + "." + value[3]); 
                          $( '#effectoptions > .input_slider').find("#input_" + key).val(value).closest('input').slider("refresh");
                          $( '#effectoptions > .input_textbox_rgb').find("#input_" + key).val("rgb(" + value[0] + "," + value[1] + "," + value[2] + ")").colorPicker();
                          $( '#effectoptions > .input_selectmenu').find("#input_" + key).closest('input').val(value).selectmenu('refresh');
                          $( '#effectoptions > .input_selectmenu_palette').find("#input_" + key).closest('input').val(value.name).selectmenu('refresh');
                        });
                        
                      }
                      
                      
                      if (result.hasOwnProperty('currentpresets') && result.currentpresets.length ) {
                        //console.log("Currentpreset length " + result.currentpresets.length); 
                        
                        $("#currentpresetslist").find('option').remove();
                            //console.log("currentmode = " + result.currentmode);
                            $("#currentpresetslist").append('<option value=255>  none </option>');
                            $.each(result.currentpresets, function(key, value) {
                                var isconnected = " ";
                                if (result.hasOwnProperty('settings')) {
                                if (result.settings.currentpreset == value.ID) isconnected = "selected=\"selected\"";
                                }
                                  
                                $("#currentpresetslist").append('<option value=' + value.ID + " " + isconnected + '>' + value.name + '</option>');
                            }); 
                        $('#currentpresetslist').selectmenu('refresh');

                        $(".presetlistclass").show();
                        
                        
                      } else {
                        
                        $("#currentpresetslist").find('option').remove();
                        $('.presetlistclass').hide();

                      }
                      //  
                      
                      if (result.hasOwnProperty('heap')) 
                      {
                        $("#heap").empty().append(result.heap).css("color", "grey");;
                      }
                      
                      
                      
                      
                      
                    }

                    //presetspage
                    
                    
                    if ($.mobile.activePage.attr('id') == 'presetspage') {
                      presetspagedata = result; 
                      $("#savepage_effects_list_select").find('option').remove();
                      if (result.hasOwnProperty('Presets')) {
                            $.each(result.Presets, function(key, value) {
                                var isconnected = " ";
                                if (result.hasOwnProperty('settings')) {
                                if (result.settings.currentpreset == value.ID) isconnected = "selected=\"selected\"";
                                }
                                  //console.log("KEY = " + key + ", VALUE = " + value); 
                                $("#savepage_effects_list_select").append('<option value=' + value.ID + " " + isconnected + '>' + value.name +"  (" + value.effect + ")" + '</option>');
                            }); 
                        $('#savepage_effects_list_select').selectmenu('refresh');                      
                      
                      }
                      if (result.hasOwnProperty('settings') && settings.hasOwnProperty('currentpresetname')) {
                      $('#presetpage_currentEffect').empty().append("Current Effect: " + result.settings.currentpresetname); // .css("color", "red");;
                    }
                    }

                    // Layout Page
                    if ($.mobile.activePage.attr('id') == 'layout') {

                        if (result.hasOwnProperty('multiplematrix')) {
                            if (result.multiplematrix === true) {
                                $("#select-matrix-type").val('multiplematrix').selectmenu("refresh");
                            } else {
                                $("#select-matrix-type").val('singlematrix').selectmenu("refresh");
                            }

                        }

                        if (result.hasOwnProperty('pixels')) {
                            $("#nopixels").val(result.pixels);
                        }
                        if (result.hasOwnProperty('grid_x')) {
                            $("#gridx").val(result.grid_x);
                        }
                        if (result.hasOwnProperty('grid_y')) {
                            $("#gridy").val(result.grid_y);
                        }
                        if (result.hasOwnProperty('matrixmode')) {
                            $("#select-matrix-type").val(result.matrixmode).selectmenu("refresh");
                        }

                        if (result.hasOwnProperty('firstpixel')) {
                            $("#select-singlematrix").val(result.firstpixel).selectmenu("refresh");
                        }
                        if (result.hasOwnProperty('axis')) {
                            $("#select-singlematrix-axis").val(result.axis).selectmenu("refresh");
                        }
                        if (result.hasOwnProperty('sequence')) {
                            $("#select-singlematrix-seq").val(result.sequence).selectmenu("refresh");
                        }

                        if (result.hasOwnProperty('multimatrixtile')) {
                            $("#select-multimatrix").val(result.multimatrixtile).selectmenu("refresh");
                        }
                        if (result.hasOwnProperty('multimatrixaxis')) {
                            $("#select-multimatrix-axis").val(result.multimatrixaxis).selectmenu("refresh");
                        }
                        if (result.hasOwnProperty('multimatrixseq')) {
                            $("#select-multimatrix-seq").val(result.multimatrixseq).selectmenu("refresh");
                        }

                        sortmatrix('#select-matrix-type');

                    }

                    if ($.mobile.activePage.attr('id') == 'palette') {
                      
                       if (result.hasOwnProperty('settings') && result.settings.hasOwnProperty('Palette'))
                       {
                         
                        palettevars = result.settings.Palette;
                      
                      //console.log(result);
                      
                        if (palettevars.hasOwnProperty('name')) {
                            $("#select-palettes2").val(palettevars.name).selectmenu("refresh");
                        } else {
                          $("#select-palettes2").val("off").selectmenu("refresh");
                        }

                        if (palettevars.hasOwnProperty('randmodeString')) {
                            $("#select-palettes-randomness").val(palettevars.randmodeString).selectmenu("refresh");
                            //console.log("randmodeString = " + palettevars.randmodeString); 
                        } else {
                            //console.log("randmodeString not found in palettevars");
                            $("#select-palettes-randomness").val("off").selectmenu("refresh");
                          
                        }
                        if (palettevars.hasOwnProperty('range')) {
                            $("#input-palette-spread").val(palettevars.range);
                        }
                        
                        if (palettevars.hasOwnProperty('delay')) {
                            $("#input-palette-delay").val(palettevars.delay);
                        }
                        
                       } else {
                         //console.log("NO PALETTE");
                         $("#select-palettes2").val("off").selectmenu("refresh");
                         $("#select-palettes-randomness").val("off").selectmenu("refresh");
                         
                       }
                    }
                    
    }

  var pagevar; 
  
        function GetData(pagevar) {
          
//            console.log("pagevar = " + pagevar);
          // if (!pagevar) {
          //       pagevar = $.mobile.activePage.attr('id');
          //       //console.log("Pagevar empty");
          //   } else {
          //       //console.log("Pagevar NOT empty");
          //     // return; 
          //   }


            $("#status").empty().append("Waiting ").css("color", "blue");;

            $.getJSON("data.esp?data=" + pagevar, function(result) {
              
              processJSON(result);


                }).success(function() {
                    $("#status").empty().append("Success").css("color", "green");;
                })
                .error(function() {
                    $("#status").empty().append("Error").css("color", "red");;
                })
                .complete(function() {});

        };

        function sortmatrix(e) {

            var mode = $(e).val();
            //console.log("Matrix mode changed:" + mode);

            if (mode === "multiplematrix") {
                $('#singlematrix-config').fadeIn();
                $('#multimatrix-config').fadeIn();
            }

            if (mode === "singlematrix") {
                $('#singlematrix-config').fadeIn();
                $('#multimatrix-config').fadeOut();
            }

        }
    </script>
</body>

</html>